defaults: &defaults
  docker:
    - image: twdu2b/infrabox
  working_directory: /home/circleci/project

version: 2
jobs:
  dummy:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: echo "Welcome to infra pipeline!";

  firstTimeSetup:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/create_tf_state_bucket.sh $TRAINING_COHORT;
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/create_key_pair.sh $TRAINING_COHORT;

  planProductionEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT base_networking plan;
            ./scripts/run_terraform.sh $TRAINING_COHORT bastion plan;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_bucket plan;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster plan;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka plan;
            ./scripts/run_terraform.sh $TRAINING_COHORT ingester plan;
            ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_dashboard plan;
            ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn plan;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_airflow plan;

  planEMREnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster plan;

  buildEMREnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster apply -input=false -auto-approve -var-file=prod-env.tfvars;

  buildProductionEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT base_networking apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT bastion apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_bucket apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster apply -input=false -auto-approve -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka apply -input=false -auto-approve -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT ingester apply -input=false -auto-approve -var-file=prod-env.tfvars;
            ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_dashboard apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn apply -input=false -auto-approve;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_airflow apply -input=false -auto-approve;

  planKafkaEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka plan;

  buildKafkaEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka apply -input=false -auto-approve -var-file=prod-env.tfvars;

  planClientVPN:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn plan;

  buildClientVPN:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn apply -input=false -auto-approve;

  buildAMIs:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
            ./scripts/build_ami.sh training_kafka;
            ./scripts/build_ami.sh training_ingester;
            ./scripts/build_ami.sh training_airflow;

#  destroyProductionEnvironment:
#      <<: *defaults
#      steps:
#      - checkout
#      - run:
#          command: source /okta_venv/bin/activate;
#                    ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn destroy -input=false -auto-approve;
#                    ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_dashboard destroy -input=false -auto-approve;
#                    ./scripts/run_terraform.sh $TRAINING_COHORT ingester destroy -input=false -auto-approve -var-file=prod-env.tfvars ;
#                    ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka destroy -input=false -auto-approve -var-file=prod-env.tfvars ;
#                    ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster destroy -input=false -auto-approve -var-file=prod-env.tfvars ;
#                    ./scripts/run_terraform.sh $TRAINING_COHORT training_bucket destroy -input=false -auto-approve;
#                    ./scripts/run_terraform.sh $TRAINING_COHORT bastion destroy -input=false -auto-approve;
#                    ./scripts/run_terraform.sh $TRAINING_COHORT base_networking destroy -input=false -auto-approve;

workflows:
  version: 2
  build:
    jobs:
      - dummy

      - approvefirstTimeSetup:
          type: approval
          requires:
            - dummy

      - firstTimeSetup:
          requires:
            - approvefirstTimeSetup

      - approvebuildAMIs:
          type: approval
          requires:
            - dummy

      - buildAMIs:
          requires:
            - approvebuildAMIs

    - approvePlanEMREnvironment:
        type: approval
        requires:
          - dummy

          - planEMREnvironment:
              requires:
                - approvePlanEMREnvironment

          - approveBuildEMREnvironment:
              type: approval
              requires:
                - planEMREnvironment

          - buildEMREnvironment:
              requires:
                - approveBuildEMREnvironment

          - approvePlanProductionEnvironment:
              type: approval
              requires:
                - dummy

          - planProductionEnvironment:
              requires:
                - approvePlanProductionEnvironment

          - approveBuildProductionEnvironment:
              type: approval
              requires:
                - planProductionEnvironment

          - buildProductionEnvironment:
              requires:
                - approveBuildProductionEnvironment

          - approvePlanKafkaEnvironment:
              type: approval
              requires:
                - dummy

          - planKafkaEnvironment:
              requires:
                - approvePlanKafkaEnvironment

          - approveBuildKafkaEnvironment:
              type: approval
              requires:
                - planKafkaEnvironment

          - buildKafkaEnvironment:
              requires:
                - approveBuildKafkaEnvironment

          - approvePlanClientVPN:
              type: approval
              requires:
                - dummy

          - planClientVPN:
              requires:
                - approvePlanClientVPN

          - approvebuildClientVPN:
              type: approval
              requires:
                - planClientVPN

          - buildClientVPN:
              requires:
                - approvebuildClientVPN

      #   - approveDestroyProductionEnvironment:
      #       type: approval
      #       requires:
      #         - dummy

      #   - destroyProductionEnvironment:
      #       requires:
      #         - approveDestroyProductionEnvironment
